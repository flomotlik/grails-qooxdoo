{"attributes": {"fullName": "qx.Mixin", "packageName": "qx", "isStatic": true, "type": "bootstrap", "name": "Mixin"}, "type": "class", "children": [{"attributes": {"text": "<p>This class is used to define mixins (similar to mixins in Ruby).</p>\n\n<p>Mixins are collections of code and variables, which can be merged into\nother classes. They are similar to classes but don&#8217;t support inheritance.</p>\n\n<p>See the description of the {@link #define} method how a mixin is defined.</p>"}, "type": "desc"}, {"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "checkCompatibility"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "mixins"}, "type": "param", "children": [{"attributes": {"text": "<p>an array of mixins</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Mixin", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check compatibility between mixins (including their includes)</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>an exception when there is a conflict between the mixins</p>"}, "type": "desc"}]}]}, {"attributes": {"isStatic": true, "name": "define"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the mixin</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Mixin definition structure. The configuration map has the following keys:\n  <table>\n    <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n    <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n        class including this mixin. The constructor takes no parameters.</td></tr>\n    <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n    <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n    <tr><th>statics</th><td>Map</td><td>\n        Map of statics of the mixin. The statics will not get copied into the target class. They remain\n        accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n    </td></tr>\n    <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n    <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n          {@link qx.core.Property}.</td></tr>\n    <tr><th>events</th><td>Map</td><td>\n        Map of events the mixin fires. The keys are the names of the events and the values are\n        corresponding event type classes.\n    </td></tr>\n  </table></p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Define a new mixin.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Mixin.define(\"name\",\n{\n  includes: [SuperMixins],\n\n  properties: {\n    tabIndex: {type: \"number\", init: -1}\n  },\n\n  members:\n  {\n    prop1: \"foo\",\n    meth1: function() {},\n    meth2: function() {}\n  }\n});\n</pre>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "flatten"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"defaultValue": "[]", "name": "mixins"}, "type": "param", "children": [{"attributes": {"text": "<p>List of mixins</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Mixin", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Generates a list of all mixins given plus all the\nmixins these includes plus&#8230; (deep)</p>"}, "type": "desc"}]}, {"attributes": {"access": "internal", "isInternal": true, "isStatic": true, "name": "genericToString"}, "type": "method", "children": [{"attributes": {"text": "<p>This method will be attached to all mixins to return\na nice identifier for them.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The mixin identifier</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getByName"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>class name to resolve</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a mixin by name</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getTotalNumber"}, "type": "method", "children": [{"attributes": {"text": "<p>Determine the number of mixins which are defined</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the number of classes</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "isCompatible"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "mixin"}, "type": "param", "children": [{"attributes": {"text": "<p>mixin to check</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Mixin"}, "type": "entry"}]}]}, {"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>class to check</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Checks if a class is compatible to the given mixin (no conflicts)</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>an exception when the given mixin is incompatible to the class</p>"}, "type": "desc"}]}, {"type": "return", "children": [{"attributes": {"text": "<p>true if the mixin is compatible to the given class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "isDefined"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>mixin name to check</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Determine if mixin exists</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>true if mixin exists</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}]}