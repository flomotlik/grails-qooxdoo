{"attributes": {"fullName": "qx.Theme", "packageName": "qx", "isStatic": true, "type": "class", "name": "Theme"}, "type": "class", "children": [{"attributes": {"text": "<p>Theme classes contain styling information for certain aspects of the\ngraphical user interface.</p>\n\n<p>Supported themes are: colors, decorations, fonts, icons, appearances.\nThe additional meta theme allows for grouping of the individual\nthemes.</p>"}, "type": "desc"}, {"type": "methods-static", "children": [{"attributes": {"access": "private", "isStatic": true, "name": "__convert"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "theme"}, "type": "param", "children": [{"attributes": {"text": "<p>newly created theme object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Theme"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>incoming theme configuration</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Convert existing entry to a prototype based inheritance function</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "isStatic": true, "name": "__extractType"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>The map from where to extract the key</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Extract the inheritable key (could be only one)</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the key which was found</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "isStatic": true, "name": "__initializeAliases"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "theme"}, "type": "param", "children": [{"attributes": {"text": "<p>The theme</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>config structure</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Initialize alias inheritance</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "isStatic": true, "name": "__normalizeArray"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "objectOrArray"}, "type": "param", "children": [{"attributes": {"text": "<p>Either an object that is to be\n  normalized to an array, or an array, which is just passed through</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Normalize an object to an array</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Either an array that has the original object as its\n  single item, or the original array itself</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "isStatic": true, "name": "__validateConfig"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>The name of the class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Configuration map</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Validates incoming configuration and checks keys and values</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>An error if the given config is not valid (e.g. wrong key or wrong key value)</p>"}, "type": "desc"}]}]}, {"attributes": {"isStatic": true, "name": "define"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the mixin</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>config structure</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Theme config</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.Theme.define(\"name\",\n{\n  aliases : {\n    \"aliasKey\" : \"resourceFolderOrUri\"\n  },\n  extend : otherTheme,\n  include : [MMixinTheme],\n  patch : [MMixinTheme],\n  colors : {},\n  decorations : {},\n  fonts : {},\n  icons : {},\n  widgets : {},\n  appearances : {},\n  meta : {}\n});\n</pre>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "internal", "isInternal": true, "isStatic": true, "name": "genericToString"}, "type": "method", "children": [{"attributes": {"text": "<p>This method will be attached to all themes to return\na nice identifier for them.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The interface identifier</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getAll"}, "type": "method", "children": [{"attributes": {"text": "<p>Return a map of all known themes</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>known themes</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getByName"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>theme name to check</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a theme by name</p>"}, "type": "desc"}, {"attributes": {"defaultValue": "void"}, "type": "return", "children": [{"attributes": {"text": "<p>theme object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getTotalNumber"}, "type": "method", "children": [{"attributes": {"text": "<p>Determine the number of themes which are defined</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the number of classes</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "include"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "theme"}, "type": "param", "children": [{"attributes": {"text": "<p>An existing theme which should be modified by including the mixin theme.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Theme"}, "type": "entry"}]}]}, {"attributes": {"name": "mixinTheme"}, "type": "param", "children": [{"attributes": {"text": "<p>The theme to be included.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Theme"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Include all keys of the given mixin theme into the theme. If the\nmixin includes any keys that are already available in the\nclass, they will be silently ignored. Use the {@link #patch} method\nif you need to overwrite keys in the current class.</p>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "isDefined"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>theme name to check</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Determine if theme exists</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>true if theme exists</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "patch"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "theme"}, "type": "param", "children": [{"attributes": {"text": "<p>An existing theme which should be modified by including the mixin theme.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Theme"}, "type": "entry"}]}]}, {"attributes": {"name": "mixinTheme"}, "type": "param", "children": [{"attributes": {"text": "<p>The theme to be included.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Theme"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Include all keys of the given mixin theme into the theme. The mixin may\ninclude keys which are already defined in the target theme. Existing\nfeatures of equal name will be overwritten.</p>"}, "type": "desc"}]}]}]}