{"attributes": {"name": "Object", "packageName": "qx.core", "mixins": "qx.data.MBinding", "childClasses": "qx.application.AbstractGui,qx.application.Native,qx.bom.Blocker,qx.bom.Font,qx.bom.History,qx.bom.Request,qx.bom.Shortcut,qx.bom.htmlarea.HtmlArea,qx.bom.htmlarea.manager.Command,qx.bom.htmlarea.manager.UndoRedo,qx.data.Array,qx.data.controller.Form,qx.data.controller.List,qx.data.controller.Object,qx.data.controller.Tree,qx.data.marshal.Json,qx.data.store.Json,qx.dev.Tokenizer,qx.dev.unit.AbstractTestSuite,qx.dev.unit.AsyncWrapper,qx.dev.unit.TestCase,qx.dev.unit.TestFunction,qx.dev.unit.TestResult,qx.event.AcceleratingTimer,qx.event.Idle,qx.event.Timer,qx.event.dispatch.AbstractBubbling,qx.event.dispatch.Direct,qx.event.handler.Appear,qx.event.handler.Application,qx.event.handler.Capture,qx.event.handler.DragDrop,qx.event.handler.Element,qx.event.handler.ElementResize,qx.event.handler.Focus,qx.event.handler.Iframe,qx.event.handler.Input,qx.event.handler.Keyboard,qx.event.handler.Mouse,qx.event.handler.Object,qx.event.handler.UserAction,qx.event.handler.Window,qx.event.message.Bus,qx.event.message.Message,qx.event.type.Event,qx.fx.Base,qx.fx.queue.Manager,qx.fx.queue.Queue,qx.html.Element,qx.io.HttpRequest,qx.io.PartLoader,qx.io.ScriptLoader,qx.io.part.Package,qx.io.part.Part,qx.io.remote.Exchange,qx.io.remote.Request,qx.io.remote.RequestQueue,qx.io.remote.Rpc,qx.io.remote.transport.Abstract,qx.io2.PartLoader,qx.locale.Manager,qx.log.appender.Element,qx.theme.manager.Appearance,qx.theme.manager.Decoration,qx.theme.manager.Icon,qx.theme.manager.Meta,qx.ui.core.Blocker,qx.ui.core.Command,qx.ui.core.DecoratorFactory,qx.ui.core.EventHandler,qx.ui.core.FocusHandler,qx.ui.core.LayoutItem,qx.ui.core.SingleSelectionManager,qx.ui.core.selection.Abstract,qx.ui.decoration.Abstract,qx.ui.form.Form,qx.ui.form.RadioGroup,qx.ui.form.Resetter,qx.ui.form.validation.AsyncValidator,qx.ui.form.validation.Manager,qx.ui.layout.Abstract,qx.ui.menu.Manager,qx.ui.popup.Manager,qx.ui.progressive.State,qx.ui.progressive.model.Abstract,qx.ui.progressive.renderer.Abstract,qx.ui.progressive.renderer.table.Widths,qx.ui.progressive.renderer.table.cell.Abstract,qx.ui.progressive.structure.Abstract,qx.ui.table.celleditor.AbstractField,qx.ui.table.celleditor.CheckBox,qx.ui.table.celleditor.ComboBox,qx.ui.table.celleditor.Dynamic,qx.ui.table.celleditor.SelectBox,qx.ui.table.cellrenderer.Abstract,qx.ui.table.columnmodel.Basic,qx.ui.table.columnmodel.resizebehavior.Abstract,qx.ui.table.headerrenderer.Default,qx.ui.table.model.Abstract,qx.ui.table.pane.Model,qx.ui.table.rowrenderer.Default,qx.ui.table.selection.Manager,qx.ui.table.selection.Model,qx.ui.tooltip.Manager,qx.ui.virtual.behavior.Prefetch,qx.ui.virtual.cell.Abstract,qx.ui.virtual.cell.AbstractWidget,qx.ui.virtual.cell.CellStylesheet,qx.ui.virtual.core.Axis,qx.ui.virtual.form.ListController,qx.ui.virtual.layer.CellSpanManager,qx.ui.window.Manager,qx.util.DeferredCall,qx.util.DeferredCallManager,qx.util.ObjectPool,qx.util.ResourceManager,qx.util.Template,qx.util.TimerManager,qx.util.ValueManager,qx.util.format.DateFormat,qx.util.format.NumberFormat,qx.util.fsm.FiniteStateMachine,qx.util.fsm.State,qx.util.fsm.Transition,qx.util.placement.AbstractAxis,qx.util.placement.Placement", "fullName": "qx.core.Object", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>The qooxdoo root class. All other classes are direct or indirect subclasses of this one.</p>\n\n<p>This class contains methods for:</p>\n\n<ul>\n<li>object management (creation and destruction)</li>\n<li>interfaces for event system</li>\n<li>generic setter/getter support</li>\n<li>interfaces for logging console</li>\n<li>user friendly OO interfaces like {@link #self} or {@link #base}</li>\n</ul>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"isCtor": true, "name": "ctor"}, "type": "method", "children": [{"attributes": {"text": "<p>Create a new instance</p>"}, "type": "desc"}]}]}, {"type": "methods", "children": [{"attributes": {"access": "protected", "name": "_disposeArray"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "field"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the field which refers to the array</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Disposes all members of the given array and deletes\nthe field which refers to the array afterwards.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_disposeFields"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>List of fields to dispose</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}]}, {"type": "deprecated", "children": [{"attributes": {"text": "<p>Performance: Don&#8217;t use &#8216;_disposeFields&#8217; &#8211; instead\n     assign directly to <code>null</code></p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Disconnects given fields from instance.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_disposeMap"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "field"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the field which refers to the map</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Disposes all members of the given map and deletes\nthe field which refers to the map afterwards.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_disposeObjects"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>List of fields (which store objects) to dispose</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Disconnects and disposes given objects from instance.\nOnly works with qx.core.Object based objects e.g. Widgets.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "addListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>event callback function</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the &#8216;this&#8217; variable inside the callback</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n        capturing phase of the bubbling phase of the event. The default is\n        to attach the event handler to the bubbling phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add event listener to this object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An opaque id, which can be used to remove the event listener\n        using the {@link #removeListenerById} method.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "addListenerOnce"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>event callback function</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the &#8216;this&#8217; variable inside the callback</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n        capturing phase of the bubbling phase of the event. The default is\n        to attach the event handler to the bubbling phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add event listener to this object, which is only called once. After the\nlistener is called the event listener gets removed.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An opaque id, which can be used to remove the event listener\n        using the {@link #removeListenerById} method.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "base"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>the arguments variable of the calling method</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}, {"attributes": {"name": "varags"}, "type": "param", "children": [{"attributes": {"text": "<p>variable number of arguments passed to the overwritten function</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Call the same method of the super class.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the return value of the method of the base class.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "clone"}, "type": "method", "children": [{"attributes": {"text": "<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Returns a clone of this object. Copies over all user configured\nproperty values. Do not configure a parent nor apply the appearance\nstyles directly.\nThe method has some limitation you should know before considering to use\nit:</p>\n\n<ul>\n<li>Objects with mandatory constructor parameters can not be cloned.</li>\n<li>Objects holding its state not only in properties will not have the same<br />\nstate!</li>\n</ul>\n\n<ul>\n<li>The method fails cloning singletons.</li>\n</ul>\n\n<ul>\n<li>If you have stored other qooxdoo objects in properties, only the<br />\nreferences will be cloned. (flat copy)</li>\n</ul>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The clone</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}]}, {"attributes": {"name": "debug"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>the message to log. If this is not a string, the\n         object dump will be logged.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Logs a debug message.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "dispatchEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "evt"}, "type": "param", "children": [{"attributes": {"text": "<p>event to dispatch</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Dispatch an event on this object</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not.\n    Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "dispose"}, "type": "method", "children": [{"attributes": {"text": "<p>Dispose this object</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "error"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>the message to log. If this is not a string, the\n     object dump will be logged.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Logs an error message.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "fireDataEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>User defined data attached to the event object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "oldData"}, "type": "param", "children": [{"attributes": {"text": "<p>The event&#8217;s old data (optional)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "cancelable"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether or not an event can have its default\n    action prevented. The default action can either be the browser&#8217;s\n    default action of a native event (e.g. open the context menu on a\n    right click) or the default action of a qooxdoo class (e.g. close\n    the window widget). The default action can be prevented by calling\n    {@link qx.event.type.Event#preventDefault}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Creates and dispatches an non-bubbling data event on this object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not.\n    Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "fireEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to\n      the event&#8217;s init method.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Creates and dispatches an event on this object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not.\n    Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "fireNonBubblingEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to\n      the event&#8217;s init method.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on this object.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not.\n    Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "get"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "prop"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the property.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the value of the given property. If no generated getter could be\nfound, a fallback tries to access a handwritten getter.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The value of the value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>an Exception if a property defined does not exist</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "getUserData"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "key"}, "type": "param", "children": [{"attributes": {"text": "<p>the key</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Load user defined data from the object</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the user data</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"name": "hasListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to check for listeners of\n        the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check if there are one or more listeners for an event type.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the object has a listener of the given type.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "info"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>the message to log. If this is not a string, the\n     object dump will be logged.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Logs an info message.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isDisposed"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns true if the object is disposed.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the object has been disposed</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "removeListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>name of the event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>event callback function</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the &#8216;this&#8217; variable inside the callback</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to remove the event listener of\n  the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove event listener from this object</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the event was removed successfully (was existend)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "removeListenerById"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The id returned by {@link #addListener}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the event was removed successfully (was existend)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "reset"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "prop"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the property.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Resets the value of the given property. If no generated resetter could be\nfound, a handwritten resetter will be invoked, if available.</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>an Exception if a property defined does not exist</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "self"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>the arguments variable of the calling method</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the static class (to access static members of this class)</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the return value of the method of the base class.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "set"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>a map of property values. The key is the name of the property.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}, {"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "", "name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>the value, only used when <code>data</code> is a string.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets multiple properties at once by using a property list or\nsets one property and its value by the first and second argument.\nAs a fallback, if no generated property setter could be found, a\nhandwritten setter will be searched and invoked if available.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>this instance.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>an Exception if a property defined does not exist</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "setUserData"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "key"}, "type": "param", "children": [{"attributes": {"text": "<p>the key</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>the value of the user data</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Store user defined data inside the object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toHashCode"}, "type": "method", "children": [{"attributes": {"text": "<p>Return unique hash code of object</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>unique hash code of the object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toString"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns a string representation of the qooxdoo object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>string representation of the object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "trace"}, "type": "method", "children": [{"attributes": {"text": "<p>Prints the current stack trace</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "warn"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>the message to log. If this is not a string, the\n     object dump will be logged.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Logs a warning message.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}]}]}