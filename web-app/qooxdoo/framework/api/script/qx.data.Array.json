{"attributes": {"name": "Array", "packageName": "qx.data", "mixins": "qx.data.marshal.MEventBubbling", "superClass": "qx.core.Object", "fullName": "qx.data.Array", "type": "class", "interfaces": "qx.data.IListData"}, "type": "class", "children": [{"attributes": {"text": "<p>The data array is a special array used in the data binding context of\nqooxdoo. It does not extend the native array of JavaScript but its a wrapper\nfor it. All the native methods are included in the implementation and it\nalso fires events if the content or the length of the array changes in\nany way. Also the <code>.length</code> property is available on the array.</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"overriddenFrom": "qx.core.Object", "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "param"}, "type": "param", "children": [{"attributes": {"text": "<p>The parameter can be some types.</p>\n\n<p>Without a parameter a new blank array will be created.</p>\n\n<p>If there is more than one parameter is given, the parameter will be\n  added directly to the new array.</p>\n\n<p>If the parameter is a number, a new Array with the given length will be\n  created.</p>\n\n<p>If the parameter is a javascript array, a new array containing the given\n  elements will be created.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Creates a new instance of an array.</p>"}, "type": "desc"}]}]}, {"type": "events", "children": [{"attributes": {"name": "change"}, "type": "event", "children": [{"attributes": {"text": "<p>The change event which will be fired if there is a change in the array.\nThe data contains a map with three key value pairs:\n<li>start: The start index of the change.</li>\n<li>end: The end index of the change.</li>\n<li>type: The type of the change as a String. This can be &#8216;add&#8217;,\n&#8216;remove&#8217; or &#8216;order&#8217;</li>\n<li>items: The items which has been changed (as a JavaScript array).</li></p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "changeLength"}, "type": "event", "children": [{"attributes": {"text": "<p>The changeLength event will be fired every time the length of the\narray changes.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "name": "__updateLength"}, "type": "method", "children": [{"attributes": {"text": "<p>Internal function which updates the length property of the array.\nEvery time the length will be updated, a {@link #changeLength} data\nevent will be fired.</p>"}, "type": "desc"}]}, {"attributes": {"name": "append"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "array"}, "type": "param", "children": [{"attributes": {"text": "<p>The items of this array will be appended.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Append the items of the given array.</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>An exception if the second argument is not an array.</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "concat"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "array"}, "type": "param", "children": [{"attributes": {"text": "<p>The javaScript array which should be concatenated\n  to the current array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Concatenates the current and the given array into a new one.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>A new array containing the values of both former\n  arrays.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "contains"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The item which is possibly in the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check if the given item is in the current array.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>true, if the array contains the given item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "copy"}, "type": "method", "children": [{"attributes": {"text": "<p>Return a copy of the given arr</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>copy of this</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "equals"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "array"}, "type": "param", "children": [{"attributes": {"text": "<p>The array to check.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check whether the given array has the same content as this.\nChecks only the equality of the arrays&#8217; content.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the two arrays are equal.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "forEach"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>The function which will be call for every\n  item in the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>The context in which the callback will be invoked.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Invokes the given function for every item in the array.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getItem"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>The index requested of the array element.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Replacement function for the getting of the array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> should be array.getItem(0).</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The element at the given index.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getLength"}, "type": "method", "children": [{"attributes": {"text": "<p>This method returns the current length stored under .length on each\narray.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The current length of the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"name": "indexOf"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The item of which the index should be returned.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the index of the item in the array. If the item is not in the\narray, -1 will be returned.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The Index of the given item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "number"}, "type": "entry"}]}]}]}, {"attributes": {"name": "insertAfter"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "after"}, "type": "param", "children": [{"attributes": {"text": "<p>Insert item after this object.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>Object to be inserted.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Insert an element into the array after a given item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "insertAt"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>Position where to insert the item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The element to insert.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Insert an element at a given position.</p>"}, "type": "desc"}]}, {"attributes": {"name": "insertBefore"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "before"}, "type": "param", "children": [{"attributes": {"text": "<p>Insert item before this object.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The item to be inserted.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Insert an item into the array before a given item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "join"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "connector"}, "type": "param", "children": [{"attributes": {"text": "<p>the string which should be used to past in\n between of the array values.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the array as a string using the given connector string to\nconnect the values.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The array as a string.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "max"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the highest value in the given array.\nSupports numeric values only.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The highest of all values or undefined if the\n  array is empty.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "min"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the lowest value in the array. Supports\nnumeric values only.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The lowest of all values or undefined\n  if the array is empty.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "pop"}, "type": "method", "children": [{"attributes": {"text": "<p>Removes and returns the last element of the array.\nAn change event will be fired.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The last element of the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "push"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>Multiple elements. Every element will be added to\n  the end of the array. An change event will be fired.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a element at the end of the array.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The new length of the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"name": "remove"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>Item to be removed from the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove the given item.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The removed item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "removeAll"}, "type": "method", "children": [{"attributes": {"text": "<p>Remmove all elements from the array.</p>"}, "type": "desc"}]}, {"attributes": {"name": "removeAt"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>Index of the item to be removed.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove an element from the array at the given index.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The removed item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "reverse"}, "type": "method", "children": [{"attributes": {"text": "<p>Reverses the order of the array. An change event will be fired.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setItem"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>The index of the array element.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}, {"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The new item to set.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Replacement function for the setting of a array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> = &#8220;a&#8221; should be array.setItem(0, &#8220;a&#8221;).\nA change event will be fired.</p>"}, "type": "desc"}]}, {"attributes": {"name": "shift"}, "type": "method", "children": [{"attributes": {"text": "<p>Removes the first element of the array and returns it. An change event\nwill be fired.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the former first element.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "slice"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "from"}, "type": "param", "children": [{"attributes": {"text": "<p>The start index.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "to"}, "type": "param", "children": [{"attributes": {"text": "<p>The end index. If omitted, slice extracts to the\n  end of the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a new array with the values specified by the parameter.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>A new array containing the given range of values.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "sort"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "func"}, "type": "param", "children": [{"attributes": {"text": "<p>A compare function comparing two parameters and\n  should return a number.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sorts the array. If a sort function is given, this will be used to\ncompare the items.</p>"}, "type": "desc"}]}, {"attributes": {"name": "splice"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "startIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The index where the splice should start</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "amount"}, "type": "param", "children": [{"attributes": {"text": "<p>Defines number of element which will be removed\n  at the given position.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>All following parameters will be added at the given\n  position to the array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Method to remove and add new element to the array. For every remove or\nadd an event will be fired.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An array containing the removed elements.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "sum"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the sum of all values in the array. Supports\nnumeric values only.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The sum of all values.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.data.IListData", "name": "toArray"}, "type": "method"}, {"attributes": {"overriddenFrom": "qx.core.Object", "name": "toString"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the toString of the original Array</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The array as a string.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "unshift"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>As many elements as you want to add to the beginning.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds the given items to the beginning of the array. For every element,\na change event will be fired.</p>"}, "type": "desc"}]}]}]}