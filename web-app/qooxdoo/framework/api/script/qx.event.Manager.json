{"attributes": {"packageName": "qx.event", "type": "bootstrap", "fullName": "qx.event.Manager", "name": "Manager"}, "type": "class", "children": [{"attributes": {"text": "<p>Wrapper for browser <span class=\"caps\">DOM</span> event handling for each browser window/frame.</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"isCtor": true, "name": "ctor"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "win"}, "type": "param", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">DOM</span> window this manager handles the events for</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Window"}, "type": "entry"}]}]}, {"attributes": {"name": "registration"}, "type": "param", "children": [{"attributes": {"text": "<p>The event registration to use</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.Registration"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Creates a new instance of the event handler.</p>"}, "type": "desc"}]}]}, {"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "getNextUniqueId"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns a unique ID which may be used in combination with a target and\na type to identify an event entry.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The next free identifier (auto-incremened)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "name": "__registerAtHandler"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n        capturing phase of the bubbling phase of the event.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method is called each time an event listener for one of the\nsupported events is added using {qx.event.Manager#addListener}.</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>an error if there is no handler for the event</p>"}, "type": "desc"}]}]}, {"attributes": {"access": "private", "name": "__unregisterAtHandler"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n        capturing phase of the bubbling phase of the event.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method is called each time the an event listener for one of the\nsupported events is removed by using {qx.event.Manager#removeListener}\nand no other event listener is listening on this type.</p>"}, "type": "desc"}, {"type": "throws", "children": [{"attributes": {"text": "<p>an error if there is no handler for the event</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "addListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event e.g. &#8220;click&#8221;, &#8220;keydown&#8221;, ...</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>Event listener function</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside\n        the event listener.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n        capturing phase of the bubbling phase of the event. The default is\n        to attach the event handler to the bubbling phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add an event listener to any valid target. The event listener is passed an\ninstance of {@link qx.event.type.Event} containing all relevant information\nabout the event as parameter.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An opaque ID, which can be used to remove the event listener\n        using the {@link #removeListenerById} method.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>an error if the parameters are wrong</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "dispatchEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "event"}, "type": "param", "children": [{"attributes": {"text": "<p>The event object to dispatch. The event\n    object must be obtained using {@link qx.event.Registration#createEvent}\n    and initialized using {@link qx.event.type.Event#init}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Dispatches an event object using the qooxdoo event handler system. The\nevent will only be visible in event listeners attached using\n{@link #addListener}. After dispatching the event object will be pooled\nfor later reuse or disposed.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not.\n    Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>an error if there is no dispatcher for the event</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "dispose"}, "type": "method", "children": [{"attributes": {"text": "<p>Dispose the event manager</p>"}, "type": "desc"}]}, {"attributes": {"name": "findHandler"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>The event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the event handler class matching the given event target and type</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The best matching event handler or\n    <code>null</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.IEventHandler"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getDispatcher"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>Any class which implements {@link qx.event.IEventHandler}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns an instance of the given dispatcher class for this manager(window).</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The instance used by this manager</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getHandler"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>Any class which implements {@link qx.event.IEventHandler}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns an instance of the given handler class for this manager(window).</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The instance used by this manager</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getListeners"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether the listener is for the\n      capturing phase of the bubbling phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get a copy of all event listeners for the given combination\nof target, event type and phase.</p>\n\n<p>This method is especially useful and for event handlers to\nto query the listeners registered in the manager.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Array of registered event handlers. May return\n      null when no listener were found.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getWindow"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the window instance the event manager is responsible for</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> window instance</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Window"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getWindowId"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the hashcode of the manager&#8217;s window</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The window&#8217;s hashcode</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "hasListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>The event type</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to check for listeners of\n        the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check whether there are one or more listeners for an event type\nregistered at the target.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the target has event listeners of the given type.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "importListeners"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "list"}, "type": "param", "children": [{"attributes": {"text": "<p>A map where every listener has a unique key.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Imports a list of event listeners at once. This only\nworks for newly created elements as it replaces\nall existing data structures.</p>\n\n<p>Works with a map of data. Each entry in this map should be a\nmap again with the keys <code>type</code>, <code>listener</code>,\n<code>self</code>, <code>capture</code> and an optional <code>unique</code>.</p>\n\n<p>The values are identical to the parameters of {@link #addListener}.\nFor details please have a look there.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "removeAllListeners"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target to remove all event listeners from.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove all event listeners, which are attached to the given event target.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the events were existend and were removed successfully.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "removeListener"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>The pointer to the event listener</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside\n        the event listener.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to remove the event listener of\n        the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove an event listener from a event target.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the event was removed successfully (was existend)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>an error if the parameters are wrong</p>"}, "type": "desc"}]}]}, {"attributes": {"name": "removeListenerById"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The ID returned by {@link #addListener}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes an event listener from an event target by an ID returned by\n{@link #addListener}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "serializeListeners"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a serialized array of all events attached on the given target.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Array of maps where everyone contains the keys:\n  <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"access": "internal", "isInternal": true, "name": "toggleAttachedEvents"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "enable"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to enable or disable the events</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method might be used to temporarly remove all events\ndirectly attached to the given target. This do not work\nhave any effect on bubbling events normally.</p>\n\n<p>This is mainly thought for detaching events in IE, before\ncloning them. It also removes all leak scenarios\nwhen unloading a document and may be used here as well.</p>"}, "type": "desc"}]}]}]}