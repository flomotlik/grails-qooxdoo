{"attributes": {"name": "Focus", "packageName": "qx.event.handler", "superClass": "qx.core.Object", "fullName": "qx.event.handler.Focus", "type": "class", "interfaces": "qx.event.IEventHandler"}, "type": "class", "children": [{"attributes": {"text": "<p>This handler is used to normalize all focus/activation requirements\nand normalize all cross browser quirks in this area.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Webkit and Opera (before 9.5) do not support tabIndex for all elements<br />\n(See also: <a href=\"http://bugs.webkit.org/show_bug.cgi?id=7138\">http://bugs.webkit.org/show_bug.cgi?id=7138</a>)</li>\n</ul>\n\n<ul>\n<li>TabIndex is normally 0, which means all naturally focusable elements are focusable.</li>\n<li>TabIndex > 0 means that the element is focusable and tabable</li>\n<li>TabIndex < 0 means that the element, even if naturally possible, is not focusable.</li>\n</ul>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"overriddenFrom": "qx.core.Object", "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "manager"}, "type": "param", "children": [{"attributes": {"text": "<p>Event manager for the window to use</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.Manager"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create a new instance</p>"}, "type": "desc"}]}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "name": "__doWindowBlur"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper for native event listeners to react on window blur</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__doWindowFocus"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper for native event listeners to react on window focus</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__findActivatableElement"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>Element to start lookup with</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the next activatable element. May be the element itself.\nWorks a bit different than the method {@link #__findFocusableElement}\nas it looks up for a parent which is has a keep focus flag. When\nthere is such a parent it returns null otherwise the original\nincoming element.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__findFocusableElement"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>Element to start lookup with</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the next focusable parent element of a activated <span class=\"caps\">DOM</span> element.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__fireEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element which is the target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "related"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element which is the related target</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event to fire</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "bubbles"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether the event should bubble</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Shorthand to fire events from within this class.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__isFocusable"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> Element to query</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Whether the given element is focusable. This is perfectly modeled to the\nbrowsers behavior and this way may differ in the various clients.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the element is focusable</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__isSelectable"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "node"}, "type": "param", "children": [{"attributes": {"text": "<p>Node to start lookup with</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Whether the given el (or its content) should be selectable\nby the user.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the content is selectable.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__onNativeBlur"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Native event listener for <code>blur</code>.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__onNativeDragGesture"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Native event listener for <code>draggesture</code> event\nsupported by gecko. Used to stop native drag and drop when\nselection is disabled.</p>"}, "type": "desc"}, {"attributes": {"name": "http"}, "type": "see"}]}, {"attributes": {"access": "private", "name": "__onNativeFocus"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Native event listener for <code>focus</code>.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__onNativeFocusIn"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Native event listener for <code>DOMFocusIn</code> or <code>focusin</code>\ndepending on the client&#8217;s engine.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__onNativeFocusOut"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Native event listener for <code>DOMFocusOut</code> or <code>focusout</code>\ndepending on the client&#8217;s engine.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.event.handler.Focus#active", "name": "_applyActive"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyActive}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.event.handler.Focus#focus", "name": "_applyFocus"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyFocus}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_initObserver"}, "type": "method", "children": [{"attributes": {"text": "<p>Initializes event listeners.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_stopObserver"}, "type": "method", "children": [{"attributes": {"text": "<p>Disconnects event listeners.</p>"}, "type": "desc"}]}, {"attributes": {"name": "activate"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to activate</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Activates the given <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "blur"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to focus</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Blurs the given <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.event.IEventHandler", "name": "canHandleEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param"}, {"attributes": {"name": "type"}, "type": "param"}]}]}, {"attributes": {"name": "deactivate"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to activate</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Deactivates the given <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "focus"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to focus</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Focusses the given <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getActive", "fromProperty": "active"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>active</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getFocus", "fromProperty": "focus"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>focus</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initActive", "fromProperty": "active"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>active</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>active</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initFocus", "fromProperty": "focus"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>focus</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>focus</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.event.IEventHandler", "name": "registerEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param"}, {"attributes": {"name": "type"}, "type": "param"}, {"attributes": {"name": "capture"}, "type": "param"}]}]}, {"attributes": {"name": "resetActive", "fromProperty": "active"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>active</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetFocus", "fromProperty": "focus"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>focus</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setActive", "fromProperty": "active"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>active</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>active</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #active}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setFocus", "fromProperty": "focus"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>focus</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>focus</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #focus}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "tryActivate"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to activate</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Tries to activate the given element. This checks whether\nthe activation is allowed first.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.event.IEventHandler", "name": "unregisterEvent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "target"}, "type": "param"}, {"attributes": {"name": "type"}, "type": "param"}, {"attributes": {"name": "capture"}, "type": "param"}]}]}]}, {"type": "properties", "children": [{"attributes": {"allowNull": "true", "apply": "_applyActive", "name": "active", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The active <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}]}, {"attributes": {"allowNull": "true", "apply": "_applyFocus", "name": "focus", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The focussed <span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}]}]}, {"type": "constants", "children": [{"attributes": {"name": "PRIORITY"}, "type": "constant", "children": [{"attributes": {"text": "<p>Priority of this handler</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"type": "Boolean", "name": "IGNORE_CAN_HANDLE", "value": "true"}, "type": "constant", "children": [{"attributes": {"text": "<p>Whether the method &#8220;canHandleEvent&#8221; must be called</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "FOCUSABLE_ELEMENTS"}, "type": "constant", "children": [{"attributes": {"text": "<p>See: <a href=\"http://msdn.microsoft.com/en-us/library/ms534654\">http://msdn.microsoft.com/en-us/library/ms534654</a>(VS.85).aspx</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "SUPPORTED_TYPES"}, "type": "constant", "children": [{"attributes": {"text": "<p>Supported event types</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}]}