{"attributes": {"isAbstract": true, "name": "AbstractTreeItem", "packageName": "qx.ui.tree", "mixins": "qx.ui.form.MModelProperty", "superClass": "qx.ui.core.Widget", "childClasses": "qx.ui.tree.TreeFile,qx.ui.tree.TreeFolder", "fullName": "qx.ui.tree.AbstractTreeItem", "type": "class", "interfaces": "qx.ui.form.IModel"}, "type": "class", "children": [{"attributes": {"text": "<p>The AbstractTreeItem serves as a common superclass for the {@link\nTreeFile} and {@link TreeFolder} classes.</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "overriddenFrom": "qx.ui.core.Widget", "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "name": "__addChildrenToParent"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds the item&#8217;s children container to the parent&#8217;s children container.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_addWidgets"}, "type": "method", "children": [{"attributes": {"text": "<p>This method configures the tree item by adding its sub widgets like\nlabel, icon, open symbol, ...</p>\n\n<p>This method must be overridden by sub classes.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.tree.AbstractTreeItem#icon", "name": "_applyIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyIcon}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.tree.AbstractTreeItem#indent", "name": "_applyIndent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyIndent}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.tree.AbstractTreeItem#label", "name": "_applyLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyLabel}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.tree.AbstractTreeItem#open", "name": "_applyOpen"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyOpen}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.tree.AbstractTreeItem#openSymbolMode", "name": "_applyOpenSymbolMode"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #_applyOpenSymbolMode}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "docFrom": "qx.ui.core.Widget", "overriddenFrom": "qx.ui.core.Widget", "name": "_createChildControlImpl"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "id"}, "type": "param"}]}]}, {"attributes": {"access": "protected", "name": "_onChangeOpen"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>The event object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Event handler, which listens to open state changes of the open button</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_shouldShowOpenSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Whether the open symbol should be shown</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the open symbol should be shown.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_updateIndent"}, "type": "method", "children": [{"attributes": {"text": "<p>Update the indentation of the tree item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "add"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>variable number of tree items to add</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds the passed tree items to the end of this item&#8217;s children list.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addAfter"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "treeItem"}, "type": "param", "children": [{"attributes": {"text": "<p>tree item to add</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}, {"attributes": {"name": "after"}, "type": "param", "children": [{"attributes": {"text": "<p>existing child to add the item after</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add a tree item to this item after the existing child <code>before</code>.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addAt"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "treeItem"}, "type": "param", "children": [{"attributes": {"text": "<p>new tree item to insert</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}, {"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>position to insert into</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds the tree item to the current item, at the given index.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addAtBegin"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "treeItem"}, "type": "param", "children": [{"attributes": {"text": "<p>tree item to add</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add a tree item as the first child of this item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addBefore"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "treeItem"}, "type": "param", "children": [{"attributes": {"text": "<p>tree item to add</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}, {"attributes": {"name": "before"}, "type": "param", "children": [{"attributes": {"text": "<p>existing child to add the item before</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add a tree item to this item before the existing child <code>before</code>.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addIcon"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds the icon widget to the item&#8217;s horizontal box layout. If the icon\nwidget has been added before, it is removed from its old position and\nadded to the end of the layout.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"defaultValue": "0", "name": "text"}, "type": "param", "children": [{"attributes": {"text": "<p>The label&#8217;s contents</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds the label to the item&#8217;s horizontal box layout. If the label\nhas been added before, it is removed from its old position and\nadded to the end of the layout.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addOpenButton"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds the open button to the item&#8217;s horizontal box layout. If the open\nbutton has been added before, it is removed from its old position and\nadded to the end of the layout.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addSpacer"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds the spacer used to render the indentation to the item&#8217;s horizontal\nbox layout. If the spacer has been added before, it is removed from its\nold position and added to the end of the layout.</p>"}, "type": "desc"}]}, {"attributes": {"docFrom": "qx.ui.core.Widget", "overriddenFrom": "qx.ui.core.Widget", "name": "addState"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "state"}, "type": "param"}]}]}, {"attributes": {"name": "addWidget"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "widget"}, "type": "param", "children": [{"attributes": {"text": "<p>The widget to add</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "options"}, "type": "param", "children": [{"attributes": {"text": "<p>The (optional) layout options to use for the widget</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a sub widget to the tree item&#8217;s horizontal box layout.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getChildren"}, "type": "method", "children": [{"attributes": {"text": "<p>Get all child items.</p>\n\n<p>Note: Don not modify the returned array, since this function does not\nreturn a copy!</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An array of all child items.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"overriddenFrom": "qx.ui.core.Widget", "name": "getChildrenContainer"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the widget, which acts as container for the child items.\nThis widget must have a vertical box layout.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The children container</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getIcon", "fromProperty": "icon"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>icon</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getIndent", "fromProperty": "indent"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>indent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getItems"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"defaultValue": "true", "name": "recursive"}, "type": "param", "children": [{"attributes": {"text": "<p>whether children of subfolder should be\n    included</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "true", "name": "invisible"}, "type": "param", "children": [{"attributes": {"text": "<p>whether invisible children should be\n    included</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "true", "name": "ignoreFirst"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether the current treeItem should\n    be excluded from the list.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns all children of the folder.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>list of children</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"name": "getLabel", "fromProperty": "label"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>label</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getLevel"}, "type": "method", "children": [{"attributes": {"text": "<p>Computes the item&#8217;s nesting level. If the item is not part of a tree\nthis function will return <code>null</code>.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The item&#8217;s nesting level or <code>null</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOpen", "fromProperty": "open"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>open</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOpenSymbolMode", "fromProperty": "openSymbolMode"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>openSymbolMode</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getParent", "fromProperty": "parent"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>parent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>parent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getParentChildrenContainer"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the children container of the item&#8217;s parent. This function will return\n<code>null</code>, if the item does not have a parent or is not the root\nitem.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The parent&#8217;s children container.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getTree"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the tree the tree item is connected to. If the item is not part of\na tree <code>null</code> will be returned.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The item&#8217;s tree or <code>null</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.tree.Tree"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"name": "hasChildren"}, "type": "method", "children": [{"attributes": {"text": "<p>Whether the item has any children</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the item has any children.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "hasChildrenContainer"}, "type": "method", "children": [{"attributes": {"text": "<p>Whether the tree item has a children container</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether it has a children container</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initIcon", "fromProperty": "icon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>icon</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>icon</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initIndent", "fromProperty": "indent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>indent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>indent</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initLabel", "fromProperty": "label"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>label</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>label</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOpen", "fromProperty": "open"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>open</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>open</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOpenSymbolMode", "fromProperty": "openSymbolMode"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>openSymbolMode</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>openSymbolMode</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initParent", "fromProperty": "parent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>parent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>parent</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isOpen", "fromProperty": "open"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>open</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isOpenable"}, "type": "method", "children": [{"attributes": {"text": "<p>Whether the tree item can be opened.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the tree item can be opened.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "internal", "isInternal": true, "name": "recursiveAddToWidgetQueue"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds this item and recursively all sub items to the widget queue to\nupdate the indentation.</p>"}, "type": "desc"}]}, {"attributes": {"name": "remove"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>variable number of tree items to remove</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "AbstractTreeItem"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes the passed tree items from this item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "removeAll"}, "type": "method", "children": [{"attributes": {"text": "<p>Remove all child items from this item.</p>"}, "type": "desc"}]}, {"attributes": {"name": "removeAt"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "index"}, "type": "param", "children": [{"attributes": {"text": "<p>Index of the child to remove</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove the child with the given child index.</p>"}, "type": "desc"}]}, {"attributes": {"docFrom": "qx.ui.core.Widget", "overriddenFrom": "qx.ui.core.Widget", "name": "removeState"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "state"}, "type": "param"}]}]}, {"attributes": {"name": "resetIcon", "fromProperty": "icon"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>icon</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetIndent", "fromProperty": "indent"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>indent</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetLabel", "fromProperty": "label"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>label</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOpen", "fromProperty": "open"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>open</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOpenSymbolMode", "fromProperty": "openSymbolMode"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>openSymbolMode</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetParent", "fromProperty": "parent"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>parent</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setIcon", "fromProperty": "icon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>icon</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>icon</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #icon}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setIndent", "fromProperty": "indent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>indent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>indent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #indent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setLabel", "fromProperty": "label"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>label</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>label</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #label}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOpen", "fromProperty": "open"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>open</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOpenSymbolMode", "fromProperty": "openSymbolMode"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>openSymbolMode</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>openSymbolMode</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openSymbolMode}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setParent", "fromProperty": "parent"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>parent</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>parent</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #parent}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.core.Widget", "overriddenFrom": "qx.ui.core.Widget", "name": "syncWidget"}, "type": "method"}, {"attributes": {"name": "toggleOpen", "fromProperty": "open"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>open</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #open}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"type": "properties", "children": [{"attributes": {"name": "icon", "allowNull": "true", "propertyType": "new", "apply": "_applyIcon", "check": "String", "themeable": "true"}, "type": "property", "children": [{"attributes": {"text": "<p>Any <span class=\"caps\">URI</span> String supported by qx.ui.basic.Image to display a icon</p>"}, "type": "desc"}]}, {"attributes": {"name": "indent", "defaultValue": "19", "propertyType": "new", "apply": "_applyIndent", "check": "Integer", "themeable": "true"}, "type": "property", "children": [{"attributes": {"text": "<p>The number of pixel to indent the tree item for each level.</p>"}, "type": "desc"}]}, {"attributes": {"check": "String", "apply": "_applyLabel", "defaultValue": "\"\"", "name": "label", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The label/caption/text</p>"}, "type": "desc"}]}, {"attributes": {"name": "open", "defaultValue": "false", "event": "changeOpen", "propertyType": "new", "apply": "_applyOpen", "check": "Boolean"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether the tree item is opened.</p>"}, "type": "desc"}]}, {"attributes": {"name": "openSymbolMode", "defaultValue": "\"auto\"", "propertyType": "new", "apply": "_applyOpenSymbolMode", "possibleValues": "\"always\",\"never\",\"auto\"", "event": "changeOpenSymbolMode"}, "type": "property", "children": [{"attributes": {"text": "<p>Controls, when to show the open symbol. If the mode is &#8220;auto&#8221; , the open\nsymbol is shown only if the item has child items.</p>"}, "type": "desc"}]}, {"attributes": {"check": "qx.ui.tree.AbstractTreeItem", "allowNull": "true", "name": "parent", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The parent tree folder.</p>"}, "type": "desc"}]}]}, {"type": "events", "children": [{"attributes": {"name": "changeOpen"}, "type": "event", "children": [{"attributes": {"text": "Fired on change of the property {@link #open}."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "changeOpenSymbolMode"}, "type": "event", "children": [{"attributes": {"text": "Fired on change of the property {@link #openSymbolMode}."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}]}