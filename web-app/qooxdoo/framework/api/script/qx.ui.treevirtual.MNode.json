{"attributes": {"packageName": "qx.ui.treevirtual", "type": "mixin", "fullName": "qx.ui.treevirtual.MNode", "name": "MNode"}, "type": "class", "children": [{"attributes": {"text": "<p>Utility functions for working with nodes.  These methods allow reference\nto a node by either the object itself or the object&#8217;s node id.</p>"}, "type": "desc"}, {"type": "methods", "children": [{"attributes": {"isMixin": true, "name": "nodeGet"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node to have its opened/closed state toggled.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get a node object given its node id.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>If the nodeReference is a node object itself, that same node object\n  is returned (identity).  Otherwise, the node object is looked up\n  using the specified node id.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetCellStyle"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the cell style is being retrieved.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the cell style for a node</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">CSS</span> style being applied for the tree column cell for this node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetHideOpenClose"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the hideOpenClose state is being retrieved.  The\n  node can be represented either by the node object, or the node id (as\n  would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the hideOpenClose state for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The new hideOpenClose state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the icon is being retrieved.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the icon for a node when in its unselected (normal) state.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The path to the icon to be used when the node is not selected, if a\n  path has been previously provided (i.e. not using the default icon).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the label is being retrieved.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the label for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The label for the specified node</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetLabelStyle"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the label style is being retrieved.  The node can\n  be represented either by the node object, or the node id (as would\n  have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the label style for a node</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">CSS</span> style being applied for the label for this node, if a style\n  has been previously provided (i.e. not using the default style).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetOpened"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the opened state is being retrieved.  The node can\n  be represented either by the node object, or the node id (as would\n  have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the opened state for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The opened state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetSelected"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the selected state is being retrieved.  The node\n  can be represented either by the node object, or the node id (as\n  would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the selected state for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The selected state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeGetSelectedIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the icon is being retrieved.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get the icon for a node when in its selected state.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The path to the icon to be used when the node is selected, if a path\n  has been previously provided (i.e. not using the default icon).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetCellStyle"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the cell style is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "style"}, "type": "param", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">CSS</span> style to be applied for the tree column cell for this node,\n  if a style has been previously provided (i.e. not using the default\n  style).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the cell style for a node</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetHideOpenClose"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the hideOpenClose state is being set.  The node\n  can be represented either by the node object, or the node id (as\n  would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<p>The new hideOpenClose state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the hideOpenClose state for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the icon is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "path"}, "type": "param", "children": [{"attributes": {"text": "<p>The path to the icon to be used when the node is not selected</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the icon for a node when in its unselected (normal) state.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the label is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "label"}, "type": "param", "children": [{"attributes": {"text": "<p>The new label for the specified node</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the label for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetLabelStyle"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the label style is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "style"}, "type": "param", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">CSS</span> style to be applied for the label for this node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the label style for a node</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetOpened"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the opened state is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<p>The new opened state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the opened state for a node.  (Note that this method has no effect\nif the requested state is the same as the current state.)</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetSelected"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the selected state is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<p>The new selected state for the specified node.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the selected state for a node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetSelectedIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the icon is being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "path"}, "type": "param", "children": [{"attributes": {"text": "<p>The path to the icon to be used when the node is selected</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the icon for a node when in its selected state.</p>\n\n<p><span class=\"caps\">NOTE</span>: As of 13 Mar 2009, this feature is disabled by default, by\n      virtue of the fact that the tree&#8217;s &#8220;alwaysUpdateCells&#8221; property\n      has a setting of &#8216;false&#8217; now instead of &#8216;true&#8217;. Setting this\n      property to true allows the icon to change upon selection, but\n      causes problems such as single clicks not always selecting a\n      row, and, in IE, double click operations failing\n      completely. (For more information, see bugs 605 and 2021.) To\n      re-enable the option to have a unique icon that is displayed\n      when the node is selected, issue\n      <code>tree.setAlwaysUpdateCells(true);</code></p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeSetState"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which attributes are being set.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "attributes"}, "type": "param", "children": [{"attributes": {"text": "<p>Map with the node properties to be set.  The map may contain any of\n  the properties described in\n  {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set state attributes of a tree node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "nodeToggleOpened"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node to have its opened/closed state toggled.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Toggle the opened state of the node: if the node is opened, close\nit; if it is closed, open it.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}]}]}