{"attributes": {"fullName": "qx.ui.treevirtual.SimpleTreeDataCellRenderer", "packageName": "qx.ui.treevirtual", "type": "class", "name": "SimpleTreeDataCellRenderer", "superClass": "qx.ui.table.cellrenderer.Abstract"}, "type": "class", "children": [{"attributes": {"text": "<p>A data cell renderer for the tree column of a simple tree</p>\n\n<p>This cell renderer has provisions for subclasses to easily extend the\nappearance of the tree. If the tree should contain images, labels,\netc. before the indentation, the subclass should override the method\n_addExtraContentBeforeIndentation(). Similarly, content can be added before\nthe icon by overriding _addExtraContentBeforeIcon(), and before the label\nby overriding _addExtraContentBeforeLabel().</p>\n\n<p>Each of these overridden methods that calls _addImage() can provide, as\npart of the map passed to _addImage(), a member called &#8220;tooltip&#8221; which\ncontains the tool tip to present when the mouse is hovered over the image.</p>\n\n<p>If this class is subclassed to form a new cell renderer, an instance of it\nmust be provided, via the &#8216;custom&#8217; parameter, to the TreeVirtual\nconstructor.</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "overriddenFrom": "qx.ui.table.cellrenderer.Abstract", "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"type": "methods-static", "children": [{"attributes": {"access": "private", "isStatic": true, "name": "__preloadImages"}, "type": "method", "children": [{"attributes": {"text": "<p>Request preloading of images so they appear immediately upon rendering</p>"}, "type": "desc"}]}]}, {"type": "methods", "children": [{"attributes": {"access": "protected", "name": "_addExtraContentBeforeIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n     See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds extra content just before the icon.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned map contains an &#8216;html&#8217; member which contains the html for\n  the indentation, and a &#8216;pos&#8217; member which is the starting position\n  plus the width of the indentation.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addExtraContentBeforeIndentation"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n     See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds extra content just before the indentation.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned map contains an &#8216;html&#8217; member which contains the html for\n  the indentation, and a &#8216;pos&#8217; member which is the starting position\n  plus the width of the indentation.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addExtraContentBeforeLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n     See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds extra content just before the label.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned map contains an &#8216;html&#8217; member which contains the html for\n  the indentation, and a &#8216;pos&#8217; member which is the starting position\n  plus the width of the indentation.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addIcon"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add the icon for this node of the tree.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned map contains an &#8216;html&#8217; member which contains the html for\n  the icon, and a &#8216;pos&#8217; member which is the starting position plus the\n  width of the icon.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addImage"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "imageInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>How to display the image.  It optionally includes any of the\n  following:\n  <dl>\n    <dt>position {Map}</dt>\n    <dd>\n      If provided, a div is created to hold the image.  The div&#8217;s top,\n      right, bottom, left, width, and/or height may be specified with\n      members of this map.  Each is expected to be an integer value.\n    </dd>\n    <dt>imageWidth, imageHeight</dt>\n    <dd>\n      The image&#8217;s width and height.  These are used only if both are\n      specified.\n    </dd>\n  </dl></p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add an image to the tree.  This might be a visible icon or it may be\npart of the indentation.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The html for this image, possibly with a surrounding div (see\n  &#8216;position&#8217;, above).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addIndentation"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add the indentation for this node of the tree.</p>\n\n<p>The indentation optionally includes tree lines.  Whether tree lines are\nused depends on (a) the properties &#8216;useTreeLines&#8217; and\n&#8216;excludeFirstLevelTreelines&#8217; within this class; and (b) the widget\ntheme in use (some themes don&#8217;t support tree lines).</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned map contains an &#8216;html&#8217; member which contains the html for\n  the indentation, and a &#8216;pos&#8217; member which is the starting position\n  plus the width of the indentation.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_addLabel"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param", "children": [{"attributes": {"text": "<p>The information about the cell.\n  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n  Additionally, if defined, the labelSpanStyle member is used to apply\n  style to the span containing the label.  (This member is for use by\n  subclasses; it&#8217;s not otherwise used by this class.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "pos"}, "type": "param", "children": [{"attributes": {"text": "<p>The position from the left edge of the column at which to render this\n  item.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add the label for this node of the tree.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The html for the label.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "docFrom": "qx.ui.table.cellrenderer.Abstract", "overriddenFrom": "qx.ui.table.cellrenderer.Abstract", "name": "_getCellStyle"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param"}]}]}, {"attributes": {"access": "protected", "docFrom": "qx.ui.table.cellrenderer.Abstract", "overriddenFrom": "qx.ui.table.cellrenderer.Abstract", "name": "_getContentHtml"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "cellInfo"}, "type": "param"}]}]}, {"attributes": {"access": "protected", "name": "_getIndentSymbol"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "column"}, "type": "param", "children": [{"attributes": {"text": "<p>The column of indentation being requested, zero-relative</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "node"}, "type": "param", "children": [{"attributes": {"text": "<p>The node being displayed in the row.  The properties of a node are\n  described in {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Node"}, "type": "entry"}]}]}, {"attributes": {"name": "bUseTreeLines"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to find an appropriate tree line icon, or simply provide\n  white space.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "bAlwaysShowOpenCloseSymbol"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to display the open/close icon for a node even if it has no\n  children.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "bExcludeFirstLevelTreeLines"}, "type": "param", "children": [{"attributes": {"text": "<p>If bUseTreeLines is enabled, then further filtering of the left-most\n  tree line may be specified here.  If <i>true</i> then the left-most\n  tree line, between top-level siblings, will not be displayed.\n  If <i>false</i>, then the left-most tree line wiill be displayed\n  just like all of the other tree lines.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Determine the symbol to use for indentation of a tree row, at a\nparticular column.  The indentation to use may be just white space or\nmay be a tree line.  Tree lines come in numerous varieties, so the\nappropriate one is selected.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>map of image properties.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>alwaysShowOpenCloseSymbol</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>excludeFirstLevelTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>useTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>alwaysShowOpenCloseSymbol</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>alwaysShowOpenCloseSymbol</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>excludeFirstLevelTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>excludeFirstLevelTreeLines</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>useTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>useTreeLines</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>alwaysShowOpenCloseSymbol</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>excludeFirstLevelTreeLines</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>useTreeLines</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>useTreeLines</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>alwaysShowOpenCloseSymbol</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>excludeFirstLevelTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>useTreeLines</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleAlwaysShowOpenCloseSymbol", "fromProperty": "alwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>alwaysShowOpenCloseSymbol</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleExcludeFirstLevelTreeLines", "fromProperty": "excludeFirstLevelTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>excludeFirstLevelTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleUseTreeLines", "fromProperty": "useTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>useTreeLines</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #useTreeLines}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"type": "properties", "children": [{"attributes": {"check": "Boolean", "defaultValue": "false", "name": "alwaysShowOpenCloseSymbol", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Set whether the open/close button should be displayed on a branch, even\nif the branch has no children.</p>"}, "type": "desc"}]}, {"attributes": {"check": "Boolean", "defaultValue": "false", "name": "excludeFirstLevelTreeLines", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>When true, exclude only the first-level tree lines, creating,\neffectively, multiple unrelated root nodes.</p>"}, "type": "desc"}]}, {"attributes": {"check": "Boolean", "defaultValue": "true", "name": "useTreeLines", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Set whether lines linking tree children shall be drawn on the tree\nif the theme supports tree lines.</p>"}, "type": "desc"}]}]}]}