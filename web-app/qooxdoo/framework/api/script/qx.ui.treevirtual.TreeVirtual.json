{"attributes": {"fullName": "qx.ui.treevirtual.TreeVirtual", "packageName": "qx.ui.treevirtual", "type": "class", "name": "TreeVirtual", "superClass": "qx.ui.table.Table"}, "type": "class", "children": [{"attributes": {"text": "<p>A &#8220;virtual&#8221; tree</p>\n\n<p>A number of convenience methods are available in the following mixins:\n  <ul>\n    <li>{@link qx.ui.treevirtual.MNode}</li>\n    <li>{@link qx.ui.treevirtual.MFamily}</li>\n  </ul></p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"overriddenFrom": "qx.ui.table.Table", "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "headings"}, "type": "param", "children": [{"attributes": {"text": "<p>An array containing a list of strings, one for each column, representing\n  the headings for each column.  As a special case, if only one column is\n  to exist, the string representing its heading need not be enclosed in an\n  array.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}, {"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "custom"}, "type": "param", "children": [{"attributes": {"text": "<p>A map provided (typically) by subclasses, to override the various\n  supplemental classes allocated within this constructor.  For normal\n  usage, this parameter may be omitted.  Each property must be an object\n  instance or a function which returns an object instance, as indicated by\n  the defaults listed here:</p>\n\n<dl>\n    <dt>dataModel</dt>\n      <dd>new qx.ui.treevirtual.SimpleTreeDataModel()</dd>\n    <dt>treeDataCellRenderer</dt>\n      <dd>new qx.ui.treevirtual.SimpleTreeDataCellRenderer()</dd>\n    <dt>defaultDataCellRenderer</dt>\n      <dd>new qx.ui.treevirtual.DefaultDataCellRenderer()</dd>\n    <dt>dataRowRenderer</dt>\n      <dd>new qx.ui.treevirtual.SimpleTreeDataRowRenderer()</dd>\n    <dt>selectionManager</dt>\n      <dd>\n\n<pre class=\"javascript\">\n        function(obj)\n        {\n          return new qx.ui.treevirtual.SelectionManager(obj);\n        }\n      </pre>\n\n</dd>\n    <dt>tableColumnModel</dt>\n      <dd>\n\n<pre class=\"javascript\">\n        function(obj)\n        {\n          return new qx.ui.table.columnmodel.Resize(obj);\n        }\n      </pre>\n\n</dd>\n  </dl>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}]}]}, {"type": "events", "children": [{"attributes": {"name": "changeSelection"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when the selected rows change.</p>\n\n<p>Event data: An array of node objects (the selected rows&#8217; nodes)\nfrom the data model.  Each node object is described in\n{@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "treeClose"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when a tree branch is closed.</p>\n\n<p>Event data: the node object from the data model (of the node\nbeing closed) as described in\n{@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "treeOpenWhileEmpty"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when an empty tree branch is opened.</p>\n\n<p>Event data: the node object from the data model (of the node\nbeing opened) as described in\n{@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "treeOpenWithContent"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when a tree branch which already has content is opened.</p>\n\n<p>Event data: the node object from the data model (of the node\nbeing opened) as described in\n{@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"type": "methods", "children": [{"attributes": {"access": "protected", "name": "_calculateSelectedNodes"}, "type": "method", "children": [{"attributes": {"text": "<p>Calculate and return the set of nodes which are currently selected by\nthe user, on the screen.  In the process of calculating which nodes\nare selected, the nodes corresponding to the selected rows on the\nscreen are marked as selected by setting their <i>bSelected</i>\nproperty to true, and all previously-selected nodes have their\n<i>bSelected</i> property reset to false.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An array of nodes matching the set of rows which are selected on the\n  screen.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "overriddenFrom": "qx.ui.table.Table", "name": "_onKeyPress"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "evt"}, "type": "param", "children": [{"attributes": {"text": "<p>The event.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Event handler. Called when a key was pressed.</p>\n\n<p>We handle the Enter key to toggle opened/closed tree state.  All\nother keydown events are passed to our superclass.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "overriddenFrom": "qx.ui.table.Table", "name": "_onSelectionChanged"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "evt"}, "type": "param", "children": [{"attributes": {"text": "<p>The event.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Event handler. Called when the selection has changed.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getAlwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"attributes": {"text": "<p>Set whether the open/close button should be displayed on a branch,\neven if the branch has no children.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<i>true</i> if tree lines are in use;\n  <i>false</i> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getDataModel"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the data model for this tree.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The data model.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.table.ITableModel"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getExcludeFirstLevelTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Get whether drawing of first-level tree lines should be disabled even\nif drawing of tree lines is enabled.\n(See also {@link #getUseTreeLines})</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<i>true</i> if tree lines are in use;\n  <i>false</i> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getHierarchy"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node for which the hierarchy is desired.  The node can be\n  represented either by the node object, or the node id (as would have\n  been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Obtain the entire hierarchy of labels from the root down to the\nspecified node.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The returned array contains one string for each label in the\n  hierarchy of the node specified by the parameter.  Element 0 of the\n  array contains the label of the root node, element 1 contains the\n  label of the node immediately below root in the specified node&#8217;s\n  hierarchy, etc., down to the last element in the array contain the\n  label of the node referenced by the parameter.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>openCloseClickSelectsRow</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getSelectedNodes"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the nodes that are currently selected.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>An array containing the nodes that are currently selected.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getSelectionMode"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the selection mode currently in use.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>One of the values documented in {@link #setSelectionMode}</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getUseTreeLines"}, "type": "method", "children": [{"attributes": {"text": "<p>Get whether lines linking tree children shall be drawn on the tree.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<i>true</i> if tree lines are in use;\n  <i>false</i> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>openCloseClickSelectsRow</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>openCloseClickSelectsRow</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>openCloseClickSelectsRow</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setAlwaysShowOpenCloseSymbol"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<i>true</i> if the open/close button should be shown;\n  <i>false</i> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set whether the open/close button should be displayed on a branch,\neven if the branch has no children.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setExcludeFirstLevelTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<i>true</i> if first-level tree lines should be disabled;\n  <i>false</i> for normal operation."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set whether drawing of first-level tree-node lines are disabled even\nif drawing of tree lines is enabled.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>openCloseClickSelectsRow</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOverflow"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "s"}, "type": "param", "children": [{"attributes": {"text": "<p>Overflow mode.  The only allowable mode is &#8220;hidden&#8221;.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the overflow mode.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}, {"type": "throws", "children": [{"attributes": {"text": "<p>Error if tree overflow mode is other than &#8220;hidden&#8221;</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"name": "setSelectionMode"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "mode"}, "type": "param", "children": [{"attributes": {"text": "<p>The selection mode to be used.  It may be any of:</p>\n\n<pre>\n      qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\n         Nothing can ever be selected.\n\n      qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\n         Allow only one selected item.\n\n      qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\n         Allow one contiguous interval of selected items.\n\n      qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\n         Allow any selected items, whether contiguous or not.\n    </pre>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the selection mode.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setUseTreeLines"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "b"}, "type": "param", "children": [{"attributes": {"text": "<i>true</i> if tree lines should be shown; <i>false</i> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set whether lines linking tree children shall be drawn on the tree.\nNote that not all themes support tree lines.  As of the time of this\nwriting, the Classic theme supports tree lines (and uses +/- icons\nwhich lend themselves to tree lines), while the Modern theme, which\nuses right-facing and downward-facing arrows instead of +/-, does not.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleOpenCloseClickSelectsRow", "fromProperty": "openCloseClickSelectsRow"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>openCloseClickSelectsRow</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openCloseClickSelectsRow}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"type": "properties", "children": [{"attributes": {"name": "appearance", "docFrom": "qx.ui.core.Widget", "defaultValue": "\"treevirtual\"", "refine": "true", "propertyType": "new", "overriddenFrom": "qx.ui.table.Table"}, "type": "property"}, {"attributes": {"check": "Boolean", "defaultValue": "false", "name": "openCloseClickSelectsRow", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether a click on the open/close button should also cause selection of\nthe row.</p>"}, "type": "desc"}]}]}]}